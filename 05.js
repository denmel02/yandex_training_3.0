// На день рождения маленький Ипполит получил долгожданный подарок — набор дощечек с написанными на них буквами латинского алфавита. Теперь-то ему будет чем заняться долгими вечерами, тем более что мама обещала подарить ему в следующем году последовательность целых неотрицательных чисел, если он хорошо освоит этот набор. Ради такого богатства Ипполит готов на многое.

// Прямо сейчас юный исследователь полностью поглощён изучением хорошести строк. Хорошестью строки называется количество позиций от 1 до L - 1 (где L — длина строки), таких, что следующая буква в строке является следующей по алфавиту. Например, хорошесть строки "abcdefghijklmnopqrstuvwxyz" равна 25, а строки "abdc" — только 1.

// Ипполит размышляет над решением закономерно возникающей задачи: чему равна максимально возможная хорошесть строки, которую можно собрать, используя дощечки из данного набора? Вы-то и поможете ему с ней справиться.

// Формат ввода
// Первая строка ввода содержит единственное целое число N — количество различных букв в наборе (1 ≤ N ≤ 26). Обратите внимание: в наборе всегда используются N первых букв латинского алфавита.

// Следующие N строк содержат целые положительные числа ci — количество букв соответствующего типа (1 ≤ ci ≤ 109). Таким образом, первое число означает количество букв "a", второе число задаёт количество букв "b" и так далее.

// Формат вывода
// Выведите единственное целое число — максимально возможную хорошесть строки, которую можно собрать из имеющихся дощечек.

// Пример 1

// Ввод
// 3
// 1
// 1
// 1

// Вывод
// 2

// Пример 2

// Ввод
// 2
// 3
// 4

// Вывод
// 3

// Примечания
// В первом тесте имеется по одной дощечке с каждой из 3 различных букв. Ответ 2 достигается на строке "abc"

const fs = require('fs');
const fileContent = fs.readFileSync("input.txt", "utf8");

const toArr = (str) => str.split('\n').filter((value) => value).map((value) => +value);

const sum = (arr) => arr.reduce((res, value) => res + value, 0);

const fn = (n, counts) => {
    if (n < 2) {
        return 0;
    }

    const minCount = Math.min(...counts);
    const minIndex = counts.indexOf(minCount);
    const subCounts = counts
        .map((count) => count - minCount)
        .join(',')
        .split(/^0,|,0,|,0$/)
        .filter((str) => str.length)
        .map((str) => str.split(','))
        .map((newArr) => fn(newArr.length, newArr.map((item => +item))));

    console.log(counts, (n - 1) * minCount)

    return (n - 1) * minCount + sum(subCounts);
}

const [n, ...counts] = toArr(fileContent.toString());
const result = fn(n, counts);

fs.writeFileSync("output.txt", result.toString())