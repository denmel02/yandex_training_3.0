// Лёша сидел на лекции. Ему было невероятно скучно. Голос лектора казался таким далеким и незаметным...

// Чтобы окончательно не уснуть, он взял листок и написал на нём свое любимое слово. Чуть ниже он повторил своё любимое слово, без первой буквы. Ещё ниже он снова написал своё любимое слово, но в этот раз без двух первых и последней буквы.

// Тут ему пришла в голову мысль — времени до конца лекции все равно ещё очень много, почему бы не продолжить выписывать всеми возможными способами это слово без какой-то части с начала и какой-то части с конца?

// После лекции Лёша рассказал Максу, как замечательно он скоротал время. Максу стало интересно посчитать, сколько букв каждого вида встречается у Лёши в листочке. Но к сожалению, сам листочек куда-то запропастился.

// Макс хорошо знает любимое слово Лёши, а ещё у него не так много свободного времени, как у его друга, так что помогите ему быстро восстановить, сколько раз Лёше пришлось выписать каждую букву.

// Формат ввода
// На вход подаётся строка, состоящая из строчных латинских букв — любимое слово Лёши.

// Длина строки лежит в пределах от 5 до 100 000 символов.

// Формат вывода
// Для каждой буквы на листочке Лёши, выведите её, а затем через двоеточие и пробел сколько раз она встретилась в выписанных Лёшей словах (см. формат вывода в примерах). Буквы должны следовать в алфавитном порядке. Буквы, не встречающиеся на листочке, выводить не нужно.

// Пример 1

// Ввод
// hello

// Вывод
// e: 8
// h: 5
// l: 17
// o: 5

// Пример 2

// Вводы
// abacaba

// Вывод
// a: 44
// b: 24
// c: 16

// Примечания
// Пояснение к первому примеру. Если любимое Лёшино слово — "hello", то на листочке у Лёши будут выписаны следующие слова:

// "hello"
// "hell"
// "ello"
// "hel"
// "ell"
// "llo"
// "he"
// "el"
// "ll"
// "lo"
// "h"
// "e"
// "l"
// "l"
// "o"

// Среди этих слов 8 раз встречается буква "e", 5 раз — буква "h", 17 раз — буква "l" и 5 раз буква "o".

const fs = require('fs');
const fileContent = fs.readFileSync("input.txt", "utf8");

const fn = (content) => {
    const [ str ] = content.split('\n');
    const length = str.length;
    const halfLength = Math.ceil(length / 2);
    const isLengthEven = halfLength === length / 2;
    const map = new Map();

    str.split("").forEach((letter, index) => {
      const indexes = map.get(letter) || [];

      indexes.push(index <= halfLength - 1 ? index : length - 1 - index);
      map.set(letter, indexes);
    });

    const countsByPosition = Array.from({ length: halfLength }, (_, i) => {
        const value = i + 1;

        return (value + 1) * value + 2 * value * (halfLength - value) - (isLengthEven ? 0 : value);
    });
    console.log(countsByPosition)
    const countsStr = [...map.entries()].sort().map(([letter, positions]) => {
        const count = positions.reduce((res, position) => res + countsByPosition[position], 0);

        return `${letter}: ${count}`;
    }).join('\n');

    return countsStr;
}

const result = fn(fileContent.toString());

fs.writeFileSync("output.txt", result.toString())